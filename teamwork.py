import random
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import time
import logging
import os
import json
from dotenv import load_dotenv
from vk_integration import VKInteraction
from database import DataBase

logging.basicConfig(level=logging.INFO, filename="bot.log", encoding="utf-8")
load_dotenv()
TOKEN = os.getenv("VK_TOKEN")
USER_TOKEN = os.getenv("USER_TOKEN")

if not TOKEN or not USER_TOKEN:
    raise ValueError("VK_TOKEN or USER_TOKEN not found in environment variables")

vk = vk_api.VkApi(token=TOKEN)
longpoll = VkLongPoll(vk)
user = VKInteraction(USER_TOKEN, vk)
db = DataBase()
user_state = {}

def create_main_keyboard():
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_button("–ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞", color=VkKeyboardColor.POSITIVE, payload={"command": "find_person"})
    keyboard.add_button("–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö", color=VkKeyboardColor.SECONDARY, payload={"command": "list_favorites"})
    return keyboard.get_keyboard()

def create_search_keyboard():
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_button("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", color=VkKeyboardColor.PRIMARY, payload={"command": "add_favorite"})
    keyboard.add_button("–°–ª–µ–¥—É—é—â–∏–π", color=VkKeyboardColor.NEGATIVE, payload={"command": "next_person"})
    keyboard.add_line()
    keyboard.add_button("–ù–∞–∑–∞–¥", color=VkKeyboardColor.SECONDARY, payload={"command": "back"})
    return keyboard.get_keyboard()

def write_msg(user_id, message, keyboard=None, attachment=None, retries=3):
    for attempt in range(retries):
        try:
            vk.method("messages.send", {
                "user_id": user_id,
                "message": message,
                "random_id": random.randint(1, 2**31),
                "keyboard": keyboard,
                "attachment": attachment
            })
            return
        except vk_api.exceptions.ApiError as e:
            if "too many requests" in str(e).lower():
                time.sleep(1 << attempt)
                continue
            logging.error(f"Error sending message to {user_id}: {e}")
            vk.method("messages.send", {
                "user_id": user_id,
                "message": f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "random_id": random.randint(1, 2**31),
                "keyboard": keyboard,
                "attachment": attachment
            })
            return
    logging.error(f"Failed to send message to {user_id} after {retries} attempts")

def handle_find_person(user_id):
    users = user.user_search(age_from=18, age_to=30, sex=2, city=1, count=10)
    user_state[user_id] = {
        "search_results": [u["id"] for u in users],
        "current_index": 0,
        "last_command": "find_person"
    }
    if users:
        current_user = users[0]
        user_info = f"{current_user['first_name']} {current_user['last_name']}"
        photos = user.get_user_photos(current_user["id"])
        write_msg(user_id, f"üîç –ù–∞–π–¥–µ–Ω: {user_info}", create_search_keyboard(), attachment=",".join(photos))
    else:
        write_msg(user_id, "üòî –ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", create_main_keyboard())

def handle_next_person(user_id):
    state = user_state.get(user_id, {})
    if not state or state["last_command"] != "find_person" or not state["search_results"]:
        write_msg(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫!", create_main_keyboard())
        return
    state["current_index"] = (state["current_index"] + 1) % len(state["search_results"])
    next_user_id = state["search_results"][state["current_index"]]
    user_info = user.get_user_info(next_user_id)
    photos = user.get_user_photos(next_user_id)
    message = f"{user_info['first_name']} {user_info['last_name']}"
    write_msg(user_id, message, create_search_keyboard(), attachment=",".join(photos))

def handle_add_favorite(user_id):
    state = user_state.get(user_id, {})
    if not state or state["last_command"] != "find_person" or not state["search_results"]:
        write_msg(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞!", create_main_keyboard())
        return
    favorite_vk_id = state["search_results"][state["current_index"]]
    if not db.is_exist_user(user_id):
        user_info = user.get_user_info(user_id)
        city = user_info.get("city", {}).get("title", "Unknown")
        age = user_info.get("bdate", "").split(".")[-1] if user_info.get("bdate") else 0
        db.user_insert(user_id, user_info["first_name"], user_info["last_name"], city, int(age) if age else 0, user_info["sex"])
    if not db.is_exist_searchuser(favorite_vk_id):
        user_info = user.get_user_info(favorite_vk_id)
        city = user_info.get("city", {}).get("title", "Unknown")
        age = user_info.get("bdate", "").split(".")[-1] if user_info.get("bdate") else 0
        db.searchuser_insert(favorite_vk_id, user_info["first_name"], user_info["last_name"], city, int(age) if age else 0, user_info["sex"])
    db.favorites_insert(favorite_vk_id, user_id)
    write_msg(user_id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", create_search_keyboard())

def handle_list_favorites(user_id):
    favorites = db.get_info_favorite(user_id)
    if not favorites:
        write_msg(user_id, "üòî –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.", create_main_keyboard())
        return
    message = "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ:\n" + "\n".join(f"{i+1}. {name} ({url})" for i, (url, name) in enumerate(favorites))
    write_msg(user_id, message, create_main_keyboard())

while True:
    try:
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                user_id = event.user_id
                payload = event.message.get("payload")
                if payload:
                    payload = json.loads(payload)
                    command = payload.get("command")
                    if command == "find_person":
                        handle_find_person(user_id)
                    elif command == "add_favorite":
                        handle_add_favorite(user_id)
                    elif command == "list_favorites":
                        handle_list_favorites(user_id)
                    elif command == "next_person":
                        handle_next_person(user_id)
                    elif command == "back":
                        write_msg(user_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", create_main_keyboard())
                    continue

                request = event.text.lower().strip()
                logging.info(f"Message from {user_id}: {request}")
                if not request:
                    write_msg(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!", create_main_keyboard())
                    continue

                if request == "–ø—Ä–∏–≤–µ—Ç":
                    write_msg(user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤. üöÄ\n–ù–∞–∂–º–∏ ¬´–ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", create_main_keyboard())
                elif request == "–Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞":
                    handle_find_person(user_id)
                elif request == "–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
                    handle_add_favorite(user_id)
                elif request == "—Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö":
                    handle_list_favorites(user_id)
                elif request == "—Å–ª–µ–¥—É—é—â–∏–π":
                    handle_next_person(user_id)
                elif request == "–ø–æ–º–æ—â—å":
                    write_msg(user_id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n1. –ù–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π\n2. –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n3. –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö\n4. –°–ª–µ–¥—É—é—â–∏–π ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!", create_main_keyboard())
                else:
                    write_msg(user_id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ ¬´–ø–æ–º–æ—â—å¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", create_main_keyboard())

    except Exception as e:
        logging.error(f"Longpoll error: {e}")
        time.sleep(5)
